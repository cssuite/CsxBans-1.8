/* Plugin generated by AMXX-Studio */

/*							*/
/*		CSXBans #1.6 presents by <CsxTeams>	*/
/*							*/
/*	
    CSXBans System, AMX Mod X Plugin
    Copyright (C) 2014  <CsxTeams>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

	Current version: # 1.6
	--------------------------------------------------------------
	Changelog for Plugin Csxbans changes/fixes by ReVKa...
	--------------------------------------------------------------						
	v1.0 alpha ///
	-- First
	v1.2  ///

	--Remake Plagin
	--Added new menu
	--SQLX Version
	--Console Commands
	--remake ban system
	
	# v1.4
	
	* Added Web Server
	* Added Nem Commands
	* Added plugin CSXBans_add.amxx
	* Added Include <CsxInc>
	* Added Regex Function
	* Many Mooure
	
	# v1.6
	
	*** Remake Ban Sestem
	*** Remake SQLX and Web Server
	
	* Added Ban on Name
	* Remake commands for superban amx_bansuper(csx_bansuper)
	* Added to SuperBan  Ban by Name 
	* Added Subnet Ban
							*/

#include <amxmodx>
#include <fun>
#include <CsxInc>

#define PLUGIN "CSX:| Bans Mode Bonus"
#define VERSION "# 1.7"
#define AUTHOR "<Csx Teams>"
#define DATA "16:15 6.04.2014"

new g_Demo_Inc, g_Demo_after, g_DemoName,g_admin_snow;

enum _: ClientData
{
	ci_name_con[32],
	ci_steamid_con[25],
	ci_ip_con[25],
	ci_name_dcon[32],
	ci_steamid_dcon[25],
	ci_ip_dcon[25],
};
new Array:g_array;

new g_csx_command[][] = 
{
	"csx_ban", "csx_banip", "csx_bans", "csx_banmenu", "csx_unban", "csx_banlist", "csx_info", "csx_last", "csx_first"
}
new g_csx_command_help[][] = 
{
	"Ban Player STEAM_ID", "Ban Player IP", "Ban Player IP+STEAM", "Unban Player", "Show Banlist", "Info CSXBans", "Info about last disconnected client", "Info about last connected client"
}

new names[33][32]
new ips[33][32]
new authids[33][32]

new g_Count;
new g_Countd;

new g_max_players
new g_Admin[33];

public plugin_natives()
{
	register_native("set_user_frozen","user_frozen");
}

public plugin_init() 
{
	
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	g_Demo_Inc 		= register_cvar("amx_demo",		"1");
	g_Demo_after 		= register_cvar("amx_demo_rectime",	"10");
	g_DemoName 		= register_cvar("amx_demo_name",	"CSXBans_Demo");
	g_admin_snow 		= register_cvar("amx_admin_snow",	"1"); // показывать информацию другим админам если зашел не игрок а админ
	
	register_concmd("csx_info", "cmdInfo", -1, "Info About CSXBans");
	register_concmd("csx_commands", "cmdCommands", -1, "Info About CSXBans");
	register_concmd("csx_last", "cmdLast", -1, "Info About CSXBans");
	register_concmd("csx_first", "cmdFirst", -1, "Info About CSXBans");

	g_array = ArrayCreate(ClientData);
	
	g_max_players = get_maxplayers();
}
public plugin_end()
{
		ArrayDestroy(g_array)
}
public user_frozen(iPlugin, iParams)
{
	new id = get_param(1);
	set_user_maxspeed(id,1.0)
	strip_user_weapons(id)
	
	set_user_rendering(id, kRenderFxNone, 200, 0, 0,kRenderGlow,16);
	
	return PLUGIN_CONTINUE
}
// ****************************************************************************************************************************

public client_putinserver(id)
{
	g_Admin[id]= bool:access(id,ADMIN_BAN)
	
	get_user_name(id,names[id],31)
	get_user_ip(id,ips[id],31)
	get_user_authid(id,authids[id],31)
	
	static data[ClientData]
	copy(data[ci_name_con], charsmax(data[ci_name_con]), names[id]);
	copy(data[ci_steamid_con], charsmax(data[ci_steamid_con]), authids[id]);
	copy(data[ci_ip_con], charsmax(data[ci_ip_con]), ips[id]);
	
	g_Count++
	ArrayPushArray(g_array, data);
	
	for( new i = 1; i <= g_max_players; i++ )
	if(is_user_connecting(i) && g_Admin[i])	 
	{
	Print_Color(i," <^4 %s ^1> РїСЂРёСЃРѕРµРґРёРЅСЏРµС‚СЃСЏ, РµРіРѕ IP [^4 %s ^1] РµРіРѕ STEAM [^4 %s ^1]",data[ci_name_con], data[ci_ip_con], data[ci_steamid_con])
	console_print(i, "[CSXBans] %s connecting to server his ip %s his STEAM ID %s",data[ci_name_con], data[ci_ip_con], data[ci_steamid_con])
	server_print("[CSXBans] %s connecting to server his ip %s his STEAM ID %s",data[ci_name_con], data[ci_ip_con], data[ci_steamid_con])
	}
	
	if(get_pcvar_num(g_Demo_Inc))
	{
		new Float:delay = get_pcvar_float(g_Demo_after);
		if(delay < 5)
			set_pcvar_float(g_Demo_after, (delay = 5.0));
		set_task(delay, "Record", id);
	}
}
public client_disconnect(id)
{
	get_user_name(id,names[id],31)
	get_user_ip(id,ips[id],31)
	get_user_authid(id,authids[id],31)
	
	static data[ClientData]
	copy(data[ci_name_dcon], charsmax(data[ci_name_dcon]), names[id]);
	copy(data[ci_steamid_dcon], charsmax(data[ci_steamid_dcon]), authids[id]);
	copy(data[ci_ip_dcon], charsmax(data[ci_ip_dcon]), ips[id]);
	
	ArrayPushArray(g_array, data);
	g_Countd++
	
	for( new i = 1; i <= g_max_players; i++ )
	if(is_user_connecting(i) && g_Admin[i] && get_pcvar_num(g_admin_snow))	 
	{
	Print_Color(i," <^4 %s ^1> РїСЂРёСЃРѕРµРґРёРЅСЏРµС‚СЃСЏ, РµРіРѕ IP [^4 %s ^1] РµРіРѕ STEAM ID [^4 %s ^1]",data[ci_name_dcon], data[ci_ip_dcon], data[ci_steamid_dcon])
	console_print(i, "[CSXBans] %s disconnecting to server his ip %s his STEAM ID %s",data[ci_name_dcon], data[ci_ip_dcon], data[ci_steamid_dcon])
	}
}
public Record(id)
{
	if(!is_user_connected(id))
		return;

	new DemoName[64]
	new Time[9], Data[64];
	
	get_pcvar_string(g_DemoName, DemoName, 63);
	
	get_time("%H:%M:%S", Time, 8);
	get_time("%d.%m.%Y", Data, 63);
	
	// Replacing signs.
	replace_all(DemoName, 63, ":", "_");
	replace_all(DemoName, 63, ".", "_");
	replace_all(DemoName, 63, "*", "_");
	replace_all(DemoName, 63, "/", "_");
	replace_all(DemoName, 63, "|", "_");
	replace_all(DemoName, 63, "\", "_");
	replace_all(DemoName, 63, "?", "_");
	

	// Displaying messages.
	client_cmd(id, "stop; record ^"%s^"", DemoName);
	Print_Color(id,"^1РРґС‘С‚ Р·Р°РїРёСЃСЊ РґРµРјРѕ^4 %s.dem ^1", DemoName);
	Print_Color(id, "^1Р’СЂРµРјСЏ Р·Р°РїРёСЃРё: ^4%s^1 Р”Р°С‚Р°: ^4%s^1", Time, Data);
}

public cmdInfo(client, level, cid)
{
	Print_Color(client, "This server is usind ^3CSX:|Bans^1 v [^4%s^1]",VERSION)
	Print_Color(client, "Plagin made by ^4<Csx Teams>^1 at^3 %s^1", DATA)
	Print_Color(client, "Main Skype ^4revcrew77^1 email me...")

	console_print(client, "==================================^n*********************************^n")
	console_print(client, "[CSX:Bans] This server is usind CSX:|Bans v [%s]",VERSION)
	console_print(client, "[CSX:Bans] Plagin made by <Csx Teams> at %s", DATA)
	console_print(client, "[CSX:Bans] Main Skype revcrew77 email me...")
	console_print(client, "^n==================================^n*********************************")
	return PLUGIN_HANDLED;
}
public cmdCommands(client, level, cid)
{
	console_print(client, "^n==================================^n*********************************")
	for( new i = 0; i <= 8; i++ )
	console_print(client, "[CSX:Bans] %s 	%s", g_csx_command[i],g_csx_command_help[i]);
	
	return PLUGIN_HANDLED;
}
public cmdFirst(client, level, cid)
{
	static data[ClientData]
	ArrayGetArray(g_array, g_Count, data);
	console_print(client,"^n=========================[CSX:Bans]")
	console_print(client,"[Name '%s'] [Steam id '%s'] [Ip '%s'] ",data[ci_name_con],data[ci_steamid_con], data[ci_ip_con])
	console_print(client,"=========================^n")
}
public cmdLast(client, level, cid)
{
	static data[ClientData]
	ArrayGetArray(g_array, g_Countd, data);
	console_print(client,"^n=========================[CSX:Bans]")
	console_print(client,"[Name '%s'] [Steam id '%s'] [Ip '%s'] ",data[ci_name_con],data[ci_steamid_con], data[ci_ip_con]);
	console_print(client,"=========================^n")
}
stock access(id,level) 
{
	if (level==ADMIN_ADMIN)
	{
		return is_user_admin(id);
	}
	else if (level==ADMIN_ALL)
	{
		return 1;
	}

	return (get_user_flags(id) & level);
}

stock is_user_admin(id)
{
	new __flags=get_user_flags(id);
	return (__flags>0 && !(__flags&ADMIN_USER));
}


